library ieee;
use ieee.std_logic_1164.all;

entity bit8Adder is
	port(a, b: in std_ulogic_vector(7 downto 0);
			f: out std_ulogic_vector(7 downto 0));
end entity bit8Adder;

architecture structural of bit8Adder is
signal c0 : std_ulogic;
signal c1 : std_ulogic;
signal c2 : std_ulogic;
signal c3 : std_ulogic;
signal c4 : std_ulogic;
signal c5 : std_ulogic;
signal c6 : std_ulogic;
signal c7 : std_ulogic;

begin
	u0: work.halfAdder port map(
	a => a(0),
	b => b(0),
	f => f(0),
	c => c0);
	
	u1: work.fullAdder port map(
	a => a(1),
	b => b(1),
	cin => c0,
	f => f(1),
	cout => c1);
	
	u2: work.fullAdder port map(
	a => a(2),
	b => b(2),
	cin => c1,
	f => f(2),
	cout => c2);
	
	u3: work.fullAdder port map(
	a => a(3),
	b => b(3),
	cin => c2,
	f => f(3),
	cout => c3);
	
	u4: work.fullAdder port map(
	a => a(4),
	b => b(4),
	cin => c3,
	f => f(4),
	cout => c4);
	
	u5: work.fullAdder port map(
	a => a(5),
	b => b(5),
	cin => c4,
	f => f(5),
	cout => c5);
	
	u6: work.fullAdder port map(
	a => a(6),
	b => b(6),
	cin => c5,
	f => f(6),
	cout => c6);
		
	u7: work.fullAdder port map(
	a => a(7),
	b => b(7),
	cin => c6,
	f => f(7),
	cout => c7);
end architecture structural;